#Область Авторизация_в_Google

//Код доступа можно получить, авторизовавшись на сайте и разрешив доступ к соответствующим разрешениям
//Можно сделать, например, HTML-поле. Подробнее на сайте https://developers.google.com/identity/protocols/oauth2
//Пример реализации так же на Github (Обработка GoogleAPI_GetCode)
Функция ПолучитьКодДоступа()
	Возврат "КодДоступа";
КонецФункции


//По известному КодуДоступа имеется возможность получить токен доступа
//Возвращает структуру, содержащую:
//"Result" — Истина, если выполнено без ошибок. Иначе ложь.
//"AccessToken" — строка, содержащая токен доступа
//"RefreshToken" — строка, содержащая токен обновления
//"LifeTime" — время жизни токена
Функция ПолучитьТокен(КодДоступа, ИДКлиента, СекретКлиента) Экспорт
	Сервер = "accounts.google.com";
	Порт = 443;
	Ресурс = "/o/oauth2/token"; 	
	СтрокаЗапроса = СтрШаблон("client_id=%1&client_secret=%2&grant_type=authorization_code&code=%3&redirect_uri=http://localhost", 
		ИДКлиента, 
		СекретКлиента, 
		КодДоступа);

	Соединение = Новый HTTPСоединение(Сервер, Порт,,,,,Новый ЗащищенноеСоединениеOpenSSL);

	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
	
	ЗапросХТТП = Новый HTTPЗапрос(Ресурс, Заголовки);
	ЗапросХТТП.УстановитьТелоИзСтроки(СтрокаЗапроса);
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST",ЗапросХТТП);
		
		Если Не Ответ.КодСостояния = 200 Тогда
			Структура = Новый Структура;
			Структура.Вставить("Result", Ложь);
			Возврат Структура; 
		КонецЕсли;
	Исключение
		Структура = Новый Структура;
		Структура.Вставить("Result", Ложь);
		Возврат Структура;	
	КонецПопытки;

	Строка = Ответ.ПолучитьТелоКакСтроку();
	
    Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Строка);

	Фабрика = ФабрикаXDTO.ПрочитатьJSON(Чтение);
	
    Чтение.Закрыть();
	Структура = Новый Структура;
	Структура.Вставить("Result", Истина);
	Структура.Вставить("AccessToken", Фабрика.access_token);
	Структура.Вставить("RefreshToken", Фабрика.refresh_token);
	Структура.Вставить("LifeTime", ТекущаяДата()+Число(Фабрика.expires_in));
	Возврат Структура;	
КонецФункции

//Токен лишь временный, и чтобы не прибегать к постоянному использованию авторизации в HTML форме, токен можно продлить
//Для этого нужен RefreshToken (токен обновления)
//Возвращает структуру, содержащую:
//"Result" — Исьига есди выполнено без ошибок. Иначе ложь;
//"AccessToken" — строка, содержащая токен доступа (новый)
//"LifeTime" — время жизни нового токена
Функция ОбновитьТокен(ТокенОбновления, ИДКлиента, СекретКлиента)
	ЧастьЗапроса = 	"client_id="+ИДКлиента+"&"+
					"client_secret="+СекретКлиента+"&"+
					"refresh_token="+ТокенОбновления+"&"+
					"grant_type=refresh_token";
	
	АдресАвторизации = "/token?";
	Соединение = Новый HTTPСоединение("oauth2.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Ресурс = АдресАвторизации + ЧастьЗапроса;
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Попытка
    	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния <> 200 Тогда
			Структура = Новый Структура;
			Структура.Вставить("Result", Ложь);	
		КонецЕсли;
    	ЧтениеJSON = Новый ЧтениеJSON;
    	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
    	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	Исключение
		Структура = Новый Структура;
		Структура.Вставить("Result", Ложь);
		Возврат Структура;
	КонецПопытки;	
	НовыйТокен = Данные.access_token;
	Возврат НовыйТокен;
	Структура = Новый Структура;
	Структура.Вставить("Result", Истина);
	Структура.Вставить("AccessToken", Данные.access_token);
	Структура.Вставить("LifeTime", ТекущаяДата()+Число(Данные.expires_in));
	Возврат Структура;
КонецФункции
#КонецОбласти

#Область Функции_API
//Каждая функция возвращает "Неопределено", если в процессе выполнения не произошло ошибок. Иначе возвращает строку, содержащую ошибку.

//Создается таблица, используя ТокенДоступа и APIKey.
//Токен доступа - в разделе авторизация
//APIKey можно получить в консоли разработчика Google
//Вы можете получить ссылку на таблицу и ID таблицы из переменной "Данные". 
//JSONДляСозданияТаблицы создается в разделе Формирование JSON
Функция СоздатьТаблицу(ТокенДоступа, ApiKey, JSONДляСозданияТаблицы)
	Ресурс = "/v4/spreadsheets?key="+ApiKey;
	ОтветЗапроса = ВыполнитьЗапрос(ТокенДоступа, Ресурс, JSONДляСозданияТаблицы);
	Если ОтветЗапроса = Неопределено Тогда
		Возврат ОтветЗапроса;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Функция очищает таблицу с ID "IDТаблицы", используя ТокенДоступа и API Key и ID таблицы
//APIKey можно получить в консоли разработчика Google
//ТокенДоступа создается в разделе "Авторизация"
Функция ОчиститьТаблицу(IDТаблицы, ТокенДоступа, ApiKey) Экспорт
	JSON = JSON_ОчищениеТаблицы();   
	Ресурс = "/v4/spreadsheets/"+IDТаблицы+"/values:batchClear?key="+ApiKey;
	ОтветЗапроса = ВыполнитьЗапрос(ТокенДоступа, Ресурс, JSON);
	Если ОтветЗапроса = Неопределено Тогда
		Возврат ОтветЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//Функция записывает данные в таблицу с заданным ID с использованием токена доступа и ключа API
//Токен доступа можно получить в разделе авторизации
//API Key можно получить в консоли разработчика Google
//JSONДляЗаписиДанныхВТаблицу создается в разделе Формирование JSON
Функция ЗаписатьДанныеВТаблицу(IDТаблицы,ТокенДоступа ,APIKey, JSONДляЗаписиДанныхВТаблицу)
	Соединение = Новый HTTPСоединение("sheets.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Authorization","Bearer " + ТокенДоступа);
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Accept", "application/json");

	Ресурс = "/v4/spreadsheets/"+IDТаблицы+"/values/"+СтрЗаменить(JSONДляЗаписиДанныхВТаблицу.Range, ":", "%3A")+"?valueInputOption=RAW&key="+APIKey;
	Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Запрос.УстановитьТелоИзСтроки(JSONДляЗаписиДанныхВТаблицу.JSON);
	Попытка
    	//Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.ВызватьHTTPМетод("PUT", Запрос);
		
		Если Ответ.КодСостояния <> 200 Тогда
			Возврат "Код состояния ответа сервера — " + Строка(Ответ.КодСостояния)+".";
		КонецЕсли;

    	ЧтениеJSON = Новый ЧтениеJSON;
    	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
    	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
		Если Ответ.КодСостояния <> 200 Тогда
			ПодробнаяОшибка = Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;
	Исключение
		Возврат "Ошибка в процессе чтения ответа.";
	КонецПопытки;;	
	Возврат Данные;
	
	Возврат Неопределено;
КонецФункции
#КонецОбласти

#Область Формирование_JSON
//Функция возвращает JSON (в формате строки), необходимый для создания таблицы
//В качестве параметра МассивСтруктурПараметров — массив структур, каждая структура которого имеет ключ "Название" — название таблицы
Функция JSON_СозданиеТаблицы(НазваниеТаблицы, КоличествоЛистов, МассивСтруктурПараметров)
	JSON = Новый ЗаписьJSON();
	ПараметрыЗаписиJSON = Новый         
        ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,"",ложь,ЭкранированиеСимволовJSON.Нет,Ложь,Ложь,Ложь,Ложь,Ложь);

	JSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	Структура = Новый Структура;
		
	Properties = Новый Структура;
	Properties.Вставить("title", НазваниеТаблицы);
	Структура.Вставить("properties", Properties);
	
	Sheets = Новый Массив;
	Для Индекс = 0 По КоличествоЛистов-1 Цикл
		Sheet = Новый Структура;
		SheetProperties = Новый Структура;
		SheetProperties.Вставить("title", МассивСтруктурПараметров[Индекс].Название);
		
		Sheet.Вставить("properties", SheetProperties);
		
		Sheets.Добавить(Sheet);
	КонецЦикла;
	Структура.Вставить("sheets", Sheets);
	ЗаписатьJSON(JSON, Структура);
	Возврат JSON.Закрыть();
КонецФункции

//Функция возвращает структуру:
//"JSON" — JSON для отправки на сервер для заполнения таблицы
//"RANGE" — строка, означающая область, которую затрагивает изменение (например, "A1:C30").
//Важно. Количество колонок ТЗ не должно превышать 23.
Функция JSON_ЗаполнениеТаблицы(ТЗ)
	Если (ТЗ.Количество() = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	JSON = Новый ЗаписьJSON();
	ПараметрыЗаписиJSON = Новый         
        ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,"",ложь,ЭкранированиеСимволовJSON.Нет,Ложь,Ложь,Ложь,Ложь,Ложь);
	JSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	Структура = Новый Структура;
	КоличествоСтолбцов = ТЗ.Колонки.Количество();
	Буквы = "ABCDEFGHIJKLMNOPQRSTUVW";
	Если (КоличествоСтолбцов >  СтрДлина(Буквы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Буква = Сред(Буквы,КоличествоСтолбцов,1);
	КоличествоСтрок = ТЗ.Количество();
	Range = "A1:"+Буква+Строка(Формат(КоличествоСтрок+1, "ЧГ="));
	Структура.Вставить("range", Range);
	
	Values = Новый Массив;
	Шапка = Новый Массив;                 
	СоответствиеТипов = Новый Соответствие;
	Для каждого Колонка из ТЗ.Колонки Цикл
		СоответствиеТипов.Вставить(Строка(Колонка.Имя), Колонка.ТипЗначения);
		Шапка.Добавить(СтрЗаменить(Строка(Колонка.Имя),"""", ""));
	КонецЦикла;
	Values.Добавить(Шапка);
	Для Индекс = 0 По КоличествоСтрок-1 Цикл
		Value = Новый Массив;
		Строка = ТЗ.Получить(Индекс);
		Для каждого Эл из Строка Цикл
			Value.Добавить(СтрЗаменить(Эл, """", ""));
		КонецЦикла;
		Values.Добавить(Value);
	КонецЦикла;
	Структура.Вставить("values", Values);
 	
	ЗаписатьJSON(JSON, Структура);
	
	Ответ = Новый Структура;
	Ответ.Вставить("JSON", JSON.Закрыть());
	Ответ.Вставить("RANGE", Range);
	Возврат Ответ;
КонецФункции

//Функция возвращает JSON в формате строки, необходимый для очищения таблицы.
//Важно. Таблица будет очищаться только по столбцам от A до AA (вкл.). Можете изменить это сами.
Функция JSON_ОчищениеТаблицы()
	JSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый         
        ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,"",ложь,ЭкранированиеСимволовJSON.Нет,Ложь,Ложь,Ложь,Ложь,Ложь);
	JSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	Структура = Новый Структура;
	Ranges = Новый Массив;
	Ranges.Добавить("A:AA");
	Структура.Вставить("ranges", Ranges);
	ЗаписатьJSON(JSON, Структура);
	Возврат JSON.Закрыть();
КонецФункции
#КонецОбласти

#Область BatchUpdate

Функция BatchUpdate(ТокенДоступа, ApiKey, IDТаблицы, JSON)
	Ресурс = "/v4/spreadsheets/"+IDТаблицы+":batchUpdate?key="+ApiKey;
	ОтветЗапроса = ВыполнитьЗапрос(ТокенДоступа, Ресурс, JSON);
	Если ОтветЗапроса = Неопределено Тогда
		Возврат ОтветЗапроса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//Формирует JSON для BatchUpdate
//Здесь МассивСтруктур — массив запросов, которых нужно сделать (результаты соответствующих функций, например, JSON_BatchUpdate_UpdateBorders)
Функция JSON_BatchUpdate(МассивСтруктур)
	BatchUpdate = Новый Структура;
	BatchUpdate.Вставить("requests", МассивСтруктур);
	JSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый         
        ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,"",ложь,ЭкранированиеСимволовJSON.Нет,Ложь,Ложь,Ложь,Ложь,Ложь);
	JSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(JSON, BatchUpdate);
	Возврат JSON.Закрыть();
КонецФункции

//Создает JSON для создание бордюров
//ИДТаблицы — идентификатор таблицы в документе
//СтрНачало, СтрКонец, КолНачало, КолКонец — описание диапазона     
//Цвет — getColor()
//Ширина - ширина границы
//Стиль — по умолчанию SOLID (подробнее https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/cells#Style) 
//ВерхняяГраница,...,ЛеваяГраница,ВнутренниеГоризонтальные,  ВнутренниеВертикальные — булево, нужны ли эти границы (по умолчанию Истина)
//!ВНИМАНИЕ! Все границы одинаковые. Если хотите верхнюю одну, а нижнюю другую, то это можно сделать в два запроса
Функция JSON_BatchUpdate_UpdateBorders(ИДТаблицы, СтрНачало, СтрКонец, КолНачало, КолКонец, ВерхняяГраница=Истина, НижняяГраница=Истина, ПраваяГраница=Истина, ЛеваяГраница=Истина, ВнутренниеГоризонтальные = Истина, ВнутренниеВертикальные=Истина, Цвет = Неопределено, Ширина = Неопределено, Стиль = "SOLID")
	border = getBorder(Стиль, Ширина, Цвет);
	UpdateBordersParams = Новый Структура;
	UpdateBordersParams.Вставить("range", getRange(ИДТаблицы, СтрНачало, СтрКонец, КолНачало, КолКонец));
	Если ВерхняяГраница Тогда
		UpdateBordersParams.Вставить("top", border);
	КонецЕсли;
	Если НижняяГраница Тогда
		UpdateBordersParams.Вставить("bottom", border);
	КонецЕсли;
	Если ЛеваяГраница Тогда
		UpdateBordersParams.Вставить("left", border);
	КонецЕсли;
	Если ПраваяГраница Тогда
		UpdateBordersParams.Вставить("right", border);
	КонецЕсли;
	Если ВнутренниеГоризонтальные Тогда
		UpdateBordersParams.Вставить("innerHorizontal", border);
	КонецЕсли;
	Если ВерхняяГраница Тогда
		UpdateBordersParams.Вставить("innerVertical", border);
	КонецЕсли;
	
	UpdateBorders = Новый Структура;
	UpdateBorders.Вставить("updateBorders", UpdateBordersParams);
	Возврат UpdateBorders;
КонецФункции

//Создает JSON для объединения для таблицы с ИД "ИДТаблицы" в диапазоне (СтрНачало:СтрКонец по строке, СтрКонец:КолНачало по колонке [!!!правая граница не включительно!!!])
Функция JSON_BatchUpdate_MergeCells(ИДТаблицы, СтрНачало, СтрКонец, КолНачало, КолКонец)
	mergeCells = Новый Структура;
	Описание = Новый Структура;
	Описание.Вставить("mergeType", "MERGE_ALL");
	Описание.Вставить("range", getRange(ИДТаблицы, СтрНачало, СтрКонец, КолНачало, КолКонец));
	mergeCells.Вставить("mergeCells", Описание);
	Возврат mergeCells;
КонецФункции

//Устанавливает Цвет (функция getColor()) для ячейки Строка-Столбец в таблице с ID ИДТаблицы
Функция JSON_BatchUpdate_UpdateCells(ИДТаблицы, Строка, Колонка, Цвет = Неопределено, Жирный = Ложь, ПоЦентруВерт = Ложь, ПоЦентруГориз = Ложь, Курсив = Ложь, РазмерШрифта = Неопределено, Шрифт = Неопределено)
	updateCells = Новый Структура;
	updateCells.Вставить("fields", "userEnteredFormat.backgroundColor,userEnteredFormat.textFormat,userEnteredFormat.verticalAlignment,userEnteredFormat.horizontalAlignment");
	rows = Новый Массив;
	rowsStr = Новый Структура;
	values = Новый Массив;
	userEnteredFormat = Новый Структура;
	bgColor = Новый Структура;
	Если Цвет <> Неопределено Тогда
		bgColor.Вставить("backgroundColor", Цвет);
	КонецЕсли;
	Если ПоЦентруВерт Тогда
		bgColor.Вставить("verticalAlignment","MIDDLE");
	КонецЕсли;
	Если ПоЦентруГориз Тогда
		bgColor.Вставить("horizontalAlignment", "CENTER");
	КонецЕсли;
	Если Курсив ИЛИ Жирный ИЛИ (РазмерШрифта <> Неопределено) ИЛИ (Шрифт <> Неопределено) Тогда
		textFormat = Новый Структура;
		Если Шрифт <> Неопределено Тогда
			textFormat.Вставить("fontFamily", Шрифт);
		КонецЕсли;

		Если РазмерШрифта <> Неопределено Тогда
			textFormat.Вставить("fontSize", РазмерШрифта);
		КонецЕсли;

		Если Жирный Тогда
			textFormat.Вставить("bold", Истина);
		КонецЕсли;

		Если Курсив <> Неопределено Тогда
			textFormat.Вставить("italic", Курсив);
		КонецЕсли;
		bgColor.Вставить("textFormat", textFormat);
	КонецЕсли;
	
	userEnteredFormat.Вставить("userEnteredFormat", bgColor);
	values.Добавить(userEnteredFormat);
	rowsStr.Вставить("values", values);
	rows.Добавить(rowsStr);
	updateCells.Вставить("rows", rows);
	start = Новый СТруктура;
	Start.Вставить("columnIndex", Колонка);
	Start.Вставить("rowIndex", Строка);
	Start.Вставить("sheetId", ИДТаблицы);
	updateCells.Вставить("start",Start);  
	Ответ = Новый Структура;
	Ответ.Вставить("updateCells", updateCells);
	Возврат Ответ;
КонецФункции

//Заполняет строку номер "НомерСтроки" значениями из МассивЗначений, начиная с колонки КолНачало, заканчивая колонкой КолКонец (не включительно!!!!!)
//Есть опция жирного шрифта. По умолчанию - Ложь
Функция JSON_BatchUpdate_FillRow(ИДТаблицы, НомерСтроки, КолНачало, КолКонец, МассивЗначений)
	updateCells = Новый Структура;
	rows = Новый Массив;
	Values = Новый Массив;
	Для каждого Row из МассивЗначений Цикл
		Value = Новый Структура;
		userEnteredValue = Новый Структура;
		userEnteredValue.Вставить("stringValue", Row);
		Value.Вставить("userEnteredValue", userEnteredValue);
		СтруктураЗначение = Новый СТруктура;
		values.Добавить(value);
	КонецЦикла;
	СтруктураЗначение.Вставить("values", values);
	rows.Добавить(СтруктураЗначение);
	Range = getRange(ИДТаблицы, НомерСтроки, НомерСтроки+1, КолНачало, КолКонец);
	updateCells.Вставить("range", Range);
	updateCells.Вставить("fields", "userEnteredValue");
	updateCells.Вставить("rows", rows);
	Ответ = Новый СТруктура;
	Ответ.Вставить("updateCells", updateCells);
	Возврат Ответ;
КонецФункции

//Создает группировку по строкам (если ПоСтрокам=Истина) или по столбцам (иначе) по индексам (ИндексНачало-ИндексКонец, конец не включительно!!!) для таблицы с ID ИдТаблицы
Функция JSON_BatchUpdate_addDimension(ИДТаблицы, ИндексНачало, ИндексКонец, ПоСтрокам = Истина)
	addDimensionGroup = Новый Структура;
	Range = Новый Структура;
	Если ПоСтрокам Тогда
		Range.Вставить("dimension", "ROWS");
	Иначе
		Range.Вставить("dimension", "COLUMNS");
	КонецЕсли;
	Range.Вставить("startIndex", ИндексНачало);
	Range.Вставить("endIndex", ИндексКонец);
	Range.Вставить("sheetId", ИДТаблицы);
	addDimensionGroup.Вставить("range", Range);
	Ответ = Новый Структура;
	Ответ.Вставить("addDimensionGroup", addDimensionGroup);
	Возврат Ответ;
КонецФункции
#КонецОбласти

#Область ОсновныеОбъекты

//Описывает границу
//Style — https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/cells#Style , по умолчанию сплошная тонкая
//width — ширина, по умолчанию 1
//Color — цвет (функция getColor), по умолчанию черный
Функция getBorder(Style = "SOLID", Width=1, Color = Неопределено)
	Если Color = Неопределено Тогда
		Цвет = getColor();
	Иначе
		Цвет = Color;
	КонецЕсли;
	Border = Новый Структура;
	Border.Вставить("style", Style);
	Border.Вставить("width", width);
	Border.Вставить("color", Цвет);
	Возврат Border;
КонецФункции

//Создает структуру с ключами
//Red — Красный, число от 0 по 255
//Green — Зеленый, число от 0 по 255
//Blue — Синий, число от 0 по 255
//Alpha — Прозрачность, число от 0 по 1
Функция getColor(Red = 0, Green = 0, Blue = 0, Alpha = 1)
	Цвет = Новый Структура;
	Цвет.Вставить("red", Red);
	Цвет.Вставить("green", Green);
	Цвет.Вставить("blue", Blue);
	Цвет.Вставить("alpha", Alpha);
	Возврат Цвет;
КонецФункции

//Описывает диапазон таблицы
Функция getRange(sheetID, StartRow, EndRow, StartColumn, EndColumn)
	Range = Новый Структура;
	Range.Вставить("sheetId", sheetID);
	Range.Вставить("startRowIndex",StartRow);
	Range.Вставить("endRowIndex",EndRow);
	Range.Вставить("startColumnIndex",StartColumn);
	Range.Вставить("endColumnIndex",EndColumn);
	Возврат Range;
КонецФункции
#КонецОбласти

#Область ОбщиеФункции
Функция ВыполнитьЗапрос(ТокенДоступа, Ресурс, JSON)
	Соединение = Новый HTTPСоединение("sheets.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Authorization","Bearer " + ТокенДоступа);
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Accept", "application/json");
	
	Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Запрос.УстановитьТелоИзСтроки(JSON);
	Попытка
    	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния <> 200 Тогда
			Возврат "Код состояния ответа сервера — " + Строка(Ответ.КодСостояния)+".";
		КонецЕсли;
    	ЧтениеJSON = Новый ЧтениеJSON;
    	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
    	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
	Исключение
		Возврат "Ошибка в процессе чтения ответа.";
	КонецПопытки;
		Возврат Неопределено;
КонецФункции


Функция Тест(ИДТаблицы, НомерТаблицы, APIKey, Токен) Экспорт
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(JSON_BatchUpdate_MergeCells(1, 0, 1, 0, 8));
	i = 0;
	Пока i < 8 Цикл
		i = i + 2;
		МассивСтруктур.Добавить(JSON_BatchUpdate_MergeCells(1, 1, 2, i-2, i));
	КонецЦикла;
	Значения1 = Новый Массив;
	Значения1.Добавить("Янв-Март");
	Значения1.Добавить("");
	Значения1.Добавить("Апр-Июнь");
	Значения1.Добавить("");
	Значения1.Добавить("Июль-Сент");
	Значения1.Добавить("");
	Значения1.Добавить("Окт-Дек");
	Значения2 = Новый Массив;
	Значения2.Добавить("2020");
	МассивСтруктур.Добавить(JSON_BatchUpdate_FillRow(1, 0, 0, 1, Значения2));
	МассивСтруктур.Добавить(JSON_BatchUpdate_FillRow(1, 1, 0, 10, Значения1));
	МассивСтруктур.Добавить(JSON_BatchUpdate_UpdateBorders(1, 0, 11, 0, 10));
	МассивСтруктур.Добавить(JSON_BatchUpdate_UpdateCells(1,0,0,getColor(55,55,155,1), Истина, Истина, Истина,,14, "Comic Sans MS"));
	МассивСтруктур.Добавить(JSON_BatchUpdate_UpdateCells(1,1,0,getColor(55,55,155,1), Ложь, Истина, Истина,,16, "Comic Sans MS"));
	МассивСтруктур.Добавить(JSON_BatchUpdate_UpdateCells(1,1,2,getColor(155,55,55,1), Истина, Истина, Истина,,14, "Comic Sans MS"));
	МассивСтруктур.Добавить(JSON_BatchUpdate_UpdateCells(1,1,4,getColor(55,155,55,1), Истина, Ложь, Истина,,16, "Times New Roman"));
	МассивСтруктур.Добавить(JSON_BatchUpdate_UpdateCells(1,1,6,getColor(55,155,155,1), Ложь, Ложь, Истина,,14, "Times New Roman"));
	i = 0;
	ПФ = Новый Массив;
	Пока i < 10 Цикл
		i = i + 2;
		ПФ.Добавить("План");
		ПФ.Добавить("Факт");
	КонецЦикла;
	МассивСтруктур.Добавить(JSON_BatchUpdate_FillRow(1, 2, 0, 10, ПФ));
	#Область Дерево
	Дерево = Новый ДеревоЗначений;
	Доход = Дерево.Строки.Добавить();
	Расход = Дерево.Строки.Добавить();
	Дерево.Колонки.Добавить("П1");
	Дерево.Колонки.Добавить("Ф1");
	Дерево.Колонки.Добавить("П2");
	Дерево.Колонки.Добавить("Ф2");
	Дерево.Колонки.Добавить("П3");
	Дерево.Колонки.Добавить("Ф3");
	Дерево.Колонки.Добавить("П4");
	Дерево.Колонки.Добавить("Ф4");
	ПервыйПроектД = Доход.Строки.Добавить();
	ПервыйПроектД.П1 = "111";
	ПервыйПроектД.П2 = "112";
	ПервыйПроектД.П3 = "113";
	ПервыйПроектД.П4 = "114";
	ПервыйПроектД.Ф1 = "121";
	ПервыйПроектД.Ф2 = "122";
	ПервыйПроектД.Ф3 = "123";
	ПервыйПроектД.Ф4 = "124";
	ВторойПроектД = Доход.Строки.Добавить();
	ВторойПроектД.П1 = "211";
	ВторойПроектД.П2 = "212";
	ВторойПроектД.П3 = "213";
	ВторойПроектД.П4 = "214";
	ВторойПроектД.Ф1 = "221";
	ВторойПроектД.Ф2 = "222";
	ВторойПроектД.Ф3 = "223";
	ВторойПроектД.Ф4 = "224";
	ПервыйПроектр = Расход.Строки.Добавить();
	ПервыйПроектР.П1 = "111";
	ПервыйПроектР.П2 = "112";
	ПервыйПроектР.П3 = "113";
	ПервыйПроектР.П4 = "114";
	ПервыйПроектР.Ф1 = "121";
	ПервыйПроектР.Ф2 = "122";
	ПервыйПроектР.Ф3 = "123";
	ПервыйПроектР.Ф4 = "124";
	ВторойПроектР = Расход.Строки.Добавить();
	ВторойПроектР.П1 = "211";
	ВторойПроектР.П2 = "212";
	ВторойПроектР.П3 = "213";
	ВторойПроектР.П4 = "214";
	ВторойПроектР.Ф1 = "221";
	ВторойПроектР.Ф2 = "222";
	ВторойПроектР.Ф3 = "223";
	ВторойПроектР.Ф4 = "224";
	
	
	З1П1Д = ПервыйПроектД.Строки.Добавить();
	З1П1Д.П1 = "Q1";
	З1П1Д.П2 = "W1";
	З1П1Д.П3 = "E1";
	З1П1Д.П4 = "R1";
	З1П1Д.Ф1 = "T1";
	З1П1Д.Ф2 = "Y1";
	З1П1Д.Ф3 = "U1";
	З1П1Д.Ф4 = "I1";
	З2П1Д = ПервыйПроектД.Строки.Добавить();
	З2П1Д.П1 = "Q2";
	З2П1Д.П2 = "W2";
	З2П1Д.П3 = "E2";
	З2П1Д.П4 = "R2";
	З2П1Д.Ф1 = "T2";
	З2П1Д.Ф2 = "Y2";
	З2П1Д.Ф3 = "U2";
	З2П1Д.Ф4 = "I2";
	З3П1Д = ПервыйПроектД.Строки.Добавить();
	З3П1Д.П1 = "Q3";
	З3П1Д.П2 = "W3";
	З3П1Д.П3 = "E3";
	З3П1Д.П4 = "R3";
	З3П1Д.Ф1 = "T3";
	З3П1Д.Ф2 = "Y3";
	З3П1Д.Ф3 = "U3";
	З3П1Д.Ф4 = "I3";
	З4П1Д = ПервыйПроектД.Строки.Добавить();
	З4П1Д.П1 = "Q4";
	З4П1Д.П2 = "W4";
	З4П1Д.П3 = "E4";
	З4П1Д.П4 = "R4";
	З4П1Д.Ф1 = "T4";
	З4П1Д.Ф2 = "Y4";
	З4П1Д.Ф3 = "U4";
	З4П1Д.Ф4 = "I4";
	З1П2Д = ВторойПроектД.Строки.Добавить();
	З1П2Д.П1 = "Q5";
	З1П2Д.П2 = "W5";
	З1П2Д.П3 = "E5";
	З1П2Д.П4 = "R5";
	З1П2Д.Ф1 = "T5";
	З1П2Д.Ф2 = "Y5";
	З1П2Д.Ф3 = "U5";
	З1П2Д.Ф4 = "I5";
	З2П2Д = ВторойПроектД.Строки.Добавить();
	З2П2Д.П1 = "Q6";
	З2П2Д.П2 = "W6";
	З2П2Д.П3 = "E6";
	З2П2Д.П4 = "R6";
	З2П2Д.Ф1 = "T6";
	З2П2Д.Ф2 = "Y6";
	З2П2Д.Ф3 = "U6";
	З2П2Д.Ф4 = "I6";
	З3П2Д = ВторойПроектД.Строки.Добавить();
	З3П2Д.П1 = "Q7";
	З3П2Д.П2 = "W7";
	З3П2Д.П3 = "E7";
	З3П2Д.П4 = "R7";
	З3П2Д.Ф1 = "T7";
	З3П2Д.Ф2 = "Y7";
	З3П2Д.Ф3 = "U7";
	З3П2Д.Ф4 = "I7";
	З4П2Д = ВторойПроектД.Строки.Добавить();
	З4П2Д.П1 = "Q8";
	З4П2Д.П2 = "W8";
	З4П2Д.П3 = "E8";
	З4П2Д.П4 = "R8";
	З4П2Д.Ф1 = "T8";
	З4П2Д.Ф2 = "Y8";
	З4П2Д.Ф3 = "U8";
	З4П2Д.Ф4 = "I8";
	З1П1Р =	ПервыйПроектР.Строки.Добавить();
	З1П1Р.П1 = "Q9";
	З1П1Р.П2 = "W9";
	З1П1Р.П3 = "E9";
	З1П1Р.П4 = "R9";
	З1П1Р.Ф1 = "T9";
	З1П1Р.Ф2 = "Y9";
	З1П1Р.Ф3 = "U9";
	З1П1Р.Ф4 = "I9";
	З2П1Р =	ПервыйПроектР.Строки.Добавить();
	З2П1Р.П1 = "Q0";
	З2П1Р.П2 = "W0";
	З2П1Р.П3 = "E0";
	З2П1Р.П4 = "R0";
	З2П1Р.Ф1 = "T0";
	З2П1Р.Ф2 = "Y0";
	З2П1Р.Ф3 = "U0";
	З2П1Р.Ф4 = "I0";
	З1П2Р =	ВторойПроектР.Строки.Добавить();	
	З1П2Р.П1 = "Q11";
	З1П2Р.П2 = "W11";
	З1П2Р.П3 = "E11";
	З1П2Р.П4 = "R11";
	З1П2Р.Ф1 = "T11";
	З1П2Р.Ф2 = "Y11";
	З1П2Р.Ф3 = "U11";
	З1П2Р.Ф4 = "I11";
	#КонецОбласти
	ОбойтиДерево(Дерево, 2, 0, МассивСтруктур);
		JSON = JSON_BatchUpdate(МассивСтруктур);
	Ans = BatchUpdate(Токен, APIKey, ИДТаблицы, JSON);
	Сообщить("ВСЁ");
КонецФункции
Функция ОбойтиДерево(ЭлементДерева, ИндексВхода, Уровень, Массив)
	//НапечататьСтроку(ЭлементДерева, ИндексВхода, Уровень);
	Если Уровень > 0 Тогда
		Массив.Добавить(JSON_BatchUpdate_FillRow(1,ИндексВхода,0,8, ЭлементДерева));
		
		Если Уровень = 1 Тогда
			Цвет = getColor(50,50,70, 1);
			Для j = 0 по 7 Цикл 
				Массив.Добавить(JSON_BatchUpdate_updateCells(1,ИндексВхода,j,Цвет, Истина, Истина, Истина));
			КонецЦикла;
		КонецЕсли;
		Если Уровень = 2 Тогда
			Цвет = getColor(150,120,30, 0.7);
			Для j = 0 по 7 Цикл 
				Массив.Добавить(JSON_BatchUpdate_updateCells(1,ИндексВхода,j,Цвет, Истина, Истина, Истина));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	i = 1;
	Для каждого Строка из ЭлементДерева.Строки Цикл
		i = i + ОбойтиДерево(Строка, ИндексВхода+i, Уровень+1, Массив);
	КонецЦикла;   
	Если Уровень > 1 Тогда
		Массив.Добавить(JSON_BatchUpdate_addDimension(1,ИндексВхода,ИндексВхода+i,Истина));
	КонецЕсли;
	Возврат i;
КонецФункции

Функция НапечататьСтроку(ЭлементДерева, ИндексВхода, Уровень)
	Сообщить("ИндВхода: "+ Строка(ИндексВхода)+", Уровень"+Строка(Уровень)+"!");
КонецФункции
#КонецОбласти